"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/ai/saigent",{

/***/ "(middleware)/./pages/api/ai/saigent.ts":
/*!*********************************!*\
  !*** ./pages/api/ai/saigent.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\nconst runtime = \"edge\";\n// Constants\nconst SYSTEM_PROMPT = `You are an intelligent AI assistant that performs sentiment analysis on memecoins. \nYou are given a message and you need to analyze the sentiment of the message. \nYou need to ask the user for the token address and the ticker. \nOnce you have the token address and the ticker respond back with those two parameters. \nWe will use this to perform sentiment analysis on the token by making an external API call to the sAIgent API.`;\nconst FOLLOW_UP_SYSTEM_PROMPT = `You are an AI assistant analyzing cryptocurrency sentiment data.\nGiven the sentiment analysis results, provide a detailed and insightful interpretation of the findings.\nFocus on explaining the risk level, analysis components, and overall sentiment score in a way that helps users understand the token's current market perception.`;\nconst TOOL_DEFINITION = {\n    type: \"function\",\n    function: {\n        name: \"getTokenAddressAndTicker\",\n        description: \"Get the token address and the ticker from the user\",\n        parameters: {\n            type: \"object\",\n            properties: {\n                tokenAddress: {\n                    type: \"string\",\n                    description: \"The token address\"\n                },\n                ticker: {\n                    type: \"string\",\n                    description: \"The ticker of the token\"\n                }\n            },\n            required: [\n                \"tokenAddress\",\n                \"ticker\"\n            ]\n        }\n    }\n};\nasync function handler(request) {\n    try {\n        // Parse the incoming request JSON\n        const json = await request.json();\n        console.log(\"Received request:\", json);\n        const { messages } = json;\n        if (!messages || !Array.isArray(messages)) {\n            return new Response(JSON.stringify({\n                message: \"Invalid payload: messages must be an array.\"\n            }), {\n                status: 400,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // Ensure the API key is set\n        const apiKey = process.env.VENICE_API_KEY;\n        if (!apiKey) {\n            return new Response(JSON.stringify({\n                message: \"API Key not configured\"\n            }), {\n                status: 500,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // First call: Get token information\n        const tokenInfoRequestOptions = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"llama-3.2-3b\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: SYSTEM_PROMPT\n                    },\n                    ...messages\n                ],\n                tool_choice: {\n                    type: \"function\",\n                    function: {\n                        name: \"getTokenAddressAndTicker\"\n                    }\n                },\n                tools: [\n                    TOOL_DEFINITION\n                ],\n                stream: false\n            })\n        };\n        const tokenInfoResponse = await fetch(\"https://api.venice.ai/api/v1/chat/completions\", tokenInfoRequestOptions);\n        if (!tokenInfoResponse.ok) {\n            throw new Error(`HTTP error! status: ${tokenInfoResponse.status}`);\n        }\n        const tokenInfoData = await tokenInfoResponse.json();\n        console.log(\"Token info response received:\", tokenInfoData);\n        // Parse token information\n        const toolCalls = tokenInfoData.choices[0]?.message?.tool_calls;\n        const toolCallArgs = toolCalls?.[0]?.function.arguments;\n        let args;\n        try {\n            args = JSON.parse(toolCallArgs || \"\");\n        } catch (error) {\n            console.error(\"Failed to parse tool call arguments:\", error);\n            throw new Error(\"Invalid tool call response\");\n        }\n        const { tokenAddress, ticker } = args;\n        if (!tokenAddress || !ticker) {\n            throw new Error(\"Missing token address or ticker in AI response\");\n        }\n        // Call sentiment analysis API\n        const sentimentResponse = await fetch(\"https://64fd-4-15-123-185.ngrok-free.app/api/analyze\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                token_address: tokenAddress,\n                token_symbol: ticker\n            })\n        });\n        if (!sentimentResponse.ok) {\n            throw new Error(`Sentiment API error! status: ${sentimentResponse.status}`);\n        }\n        const sentimentData = await sentimentResponse.json();\n        console.log(\"Sentiment data received:\", sentimentData);\n        // Format sentiment data for follow-up analysis\n        const sentimentMessage = `Sentiment Analysis Results:\nScore: ${sentimentData.score || 0}\nStatus: ${sentimentData.status || \"unknown\"}\nRisk Level: ${sentimentData.risk_level || \"unknown\"}\nComponents: ${sentimentData.components}\nAnalysis: ${sentimentData.analysis}\nTechnical Details: ${sentimentData.logs}`;\n        // Follow-up call: Generate analysis of sentiment data\n        const followUpRequestOptions = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"deepseek-r1-llama-70b\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: FOLLOW_UP_SYSTEM_PROMPT\n                    },\n                    ...messages,\n                    {\n                        role: \"assistant\",\n                        content: sentimentMessage\n                    }\n                ],\n                stream: false\n            })\n        };\n        const followUpResponse = await fetch(\"https://api.venice.ai/api/v1/chat/completions\", followUpRequestOptions);\n        if (!followUpResponse.ok) {\n            throw new Error(`HTTP error! status: ${followUpResponse.status}`);\n        }\n        const followUpData = await followUpResponse.json();\n        console.log(\"Follow-up analysis received:\", followUpData);\n        const finalChoice = followUpData.choices?.[0];\n        if (!finalChoice?.message) {\n            throw new Error(\"No message returned in the follow-up response.\");\n        }\n        // Construct the final JSON response\n        const jsonResponse = {\n            id: followUpData.id,\n            object: \"chat.completion\",\n            created: Math.floor(Date.now() / 1000),\n            model: \"deepseek-r1-llama-70b\",\n            choices: [\n                {\n                    index: 0,\n                    message: finalChoice.message,\n                    finish_reason: finalChoice.finish_reason\n                }\n            ],\n            usage: followUpData.usage\n        };\n        console.log(\"Sending response:\", jsonResponse);\n        return new Response(JSON.stringify(jsonResponse), {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    } catch (error) {\n        console.error(\"Error in API call:\", error);\n        let errorMessage = error.message || \"An unexpected error occurred\";\n        const errorCode = error.status || 500;\n        if (errorMessage.toLowerCase().includes(\"api key not found\")) {\n            errorMessage = \"API Key not found. Please check your configuration.\";\n        } else if (errorCode === 401) {\n            errorMessage = \"API Key is incorrect. Please check your configuration.\";\n        }\n        return new Response(JSON.stringify({\n            message: errorMessage\n        }), {\n            status: errorCode,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./pages/api/ai/saigent.ts\n");

/***/ })

});