"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/api/ai/saigent",{

/***/ "(middleware)/./pages/api/ai/saigent.ts":
/*!*********************************!*\
  !*** ./pages/api/ai/saigent.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(middleware)/./node_modules/openai/index.mjs\");\n\nconst runtime = \"edge\";\n// --- Constants ---\nconst SYSTEM_PROMPT = `You are an intelligent AI assistant that performs sentiment analysis on memecoins. \nYou are given a message and you need to analyze the sentiment of the message. \nYou need to ask the user for the token address and the ticker. \nOnce you have the token address and the ticker respond back with those two parameters. \nWe will use this to perform sentiment analysis on the token by making an external API call to the sAIgent API.`;\nconst TOOL_DEFINITION = {\n    type: \"function\",\n    function: {\n        name: \"getTokenAddressAndTicker\",\n        description: \"Get the token address and the ticker from the user\",\n        parameters: {\n            type: \"object\",\n            properties: {\n                tokenAddress: {\n                    type: \"string\",\n                    description: \"The token address\"\n                },\n                ticker: {\n                    type: \"string\",\n                    description: \"The ticker of the token\"\n                }\n            },\n            required: [\n                \"tokenAddress\",\n                \"ticker\"\n            ]\n        }\n    }\n};\n// --- Helper Functions ---\nconst generateMessageId = ()=>{\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\nfunction createErrorResponse(message, status) {\n    return new Response(JSON.stringify({\n        message\n    }), {\n        status,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\nfunction handleError(error) {\n    console.error(\"Error in API call:\", error);\n    const errorDetails = error instanceof Error ? error : new Error(\"Unknown error\");\n    const status = error.status || 500;\n    let message = errorDetails.message;\n    if (message.toLowerCase().includes(\"api key not found\")) {\n        message = \"API Key not found. Please check your configuration.\";\n    } else if (status === 401) {\n        message = \"API Key is incorrect. Please check your configuration.\";\n    } else {\n        message = \"An unexpected error occurred\";\n    }\n    return createErrorResponse(message, status);\n}\n// --- Main Handler ---\nasync function handler(request) {\n    console.log(\"Request received\");\n    try {\n        // Parse and validate request payload.\n        const json = await request.json();\n        const { messages } = json;\n        if (!messages || !Array.isArray(messages)) {\n            return createErrorResponse(\"Invalid payload: messages must be an array.\", 400);\n        }\n        // Ensure the API key is set.\n        const apiKey = process.env.VENICE_API_KEY;\n        if (!apiKey) {\n            return createErrorResponse(\"API Key not configured\", 500);\n        }\n        // Initialize the Venice client.\n        const venice = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey,\n            baseURL: \"https://api.venice.ai/api/v1\"\n        });\n        // Create the chat completion request.\n        const response = await venice.chat.completions.create({\n            model: \"llama-3.2-3b\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: SYSTEM_PROMPT\n                },\n                ...messages\n            ],\n            tool_choice: {\n                type: \"function\",\n                function: {\n                    name: \"getTokenAddressAndTicker\"\n                }\n            },\n            tools: [\n                TOOL_DEFINITION\n            ],\n            stream: false\n        });\n        console.log(\"Response received\", response);\n        const parsedResponse = JSON.parse(JSON.stringify(response));\n        const firstChoice = parsedResponse.choices[0];\n        const message = firstChoice?.message;\n        // Extract tool call information.\n        const toolCalls = message?.tool_calls;\n        // Parse the arguments from the first tool call.\n        const toolCallArgs = toolCalls?.[0]?.function.arguments;\n        console.log(\"Tool call arguments:\", toolCallArgs);\n        let args;\n        try {\n            args = JSON.parse(toolCallArgs || \"\");\n        } catch (error) {\n            console.error(\"Failed to parse tool call arguments:\", error);\n            return createErrorResponse(\"Invalid tool call response\", 400);\n        }\n        const { tokenAddress, ticker } = args;\n        if (!tokenAddress || !ticker) {\n            return createErrorResponse(\"Missing token address or ticker in AI response\", 400);\n        }\n        console.log(\"Token address:\", tokenAddress);\n        console.log(\"Ticker:\", ticker);\n        // Call the sentiment analysis API.\n        const sentimentResponse = await fetch(\"https://3e84-4-15-123-185.ngrok-free.app/api/analyze\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                token_address: tokenAddress,\n                token_symbol: ticker\n            })\n        });\n        // Sentiment analysis response\n        const sentimentData = await sentimentResponse.json();\n        const sentimentScore = sentimentData.score ? sentimentData.score : 0;\n        const status = sentimentData.status ? sentimentData.status : \"error\";\n        const risk_level = sentimentData.risk_level ? sentimentData.risk_level : \"unknown\";\n        const components = sentimentData.components ? sentimentData.components : [];\n        const analysis = sentimentData.analysis ? sentimentData.analysis : [];\n        const logs = sentimentData.logs ? sentimentData.logs : [];\n        console.log(\"Sentiment data received\", sentimentData);\n        const sentimentMessage = `The sentiment of the token ${ticker} (${tokenAddress}) is the following: ${sentimentScore}. The status of the sentiment analysis is ${status}. The risk level of the sentiment analysis is ${risk_level}. The components of the sentiment analysis are ${components}. The analysis of the sentiment analysis is ${analysis}. The logs of the sentiment analysis are ${logs}.`;\n        messages.push({\n            role: \"assistant\",\n            content: sentimentMessage\n        });\n        // Follow up sentiment analysis call\n        const followUpResponse = await venice.chat.completions.create({\n            model: \"deepseek-r1-llama-70b\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: SYSTEM_PROMPT\n                },\n                ...messages\n            ]\n        });\n        console.log(\"Follow up response received\", followUpResponse);\n        const parsedFollowUpResponse = JSON.parse(response);\n        const followUpChoice = parsedFollowUpResponse?.choices[0];\n        const followUpMessage = followUpChoice?.message.content;\n        // Construct the final JSON response.\n        const jsonResponse = {\n            id: response.id,\n            object: \"chat.completion\",\n            created: Math.floor(Date.now() / 1000),\n            model: \"deepseek-r1-llama-70b\",\n            choices: [\n                {\n                    index: 0,\n                    message: {\n                        role: \"assistant\",\n                        content: followUpMessage\n                    },\n                    finish_reason: followUpChoice.finish_reason\n                }\n            ],\n            usage: response.usage\n        };\n        console.log(\"Sending response:\", jsonResponse);\n        return new Response(JSON.stringify(jsonResponse), {\n            status: 200,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    } catch (error) {\n        return handleError(error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./pages/api/ai/saigent.ts\n");

/***/ })

});